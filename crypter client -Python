import tkinter as tk
from tkinter import filedialog, messagebox
import os
import base64
import random
import string

# RC4 encryption function
def rc4_encrypt(data, key):
    s = list(range(256))
    j = 0
    out = []

    # Key-scheduling algorithm (KSA)
    for i in range(256):
        j = (j + s[i] + ord(key[i % len(key)])) % 256
        s[i], s[j] = s[j], s[i]

    # Pseudo-random generation algorithm (PRGA)
    i = j = 0
    for char in data:
        i = (i + 1) % 256
        j = (j + s[i]) % 256
        s[i], s[j] = s[j], s[i]
        out.append(char ^ s[(s[i] + s[j]) % 256])

    return bytes(out)

# Generate a random string
def generate_random_string(length):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

class CrypterApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Crypter Client")
        self.root.geometry("400x300")

        # Input fields
        self.file_path = tk.StringVar()
        self.stub_path = tk.StringVar()
        self.key = tk.StringVar()

        # File selection
        tk.Label(root, text="Select File:").pack()
        tk.Entry(root, textvariable=self.file_path, width=50).pack()
        tk.Button(root, text="Browse", command=self.select_file).pack()

        tk.Label(root, text="Select Stub:").pack()
        tk.Entry(root, textvariable=self.stub_path, width=50).pack()
        tk.Button(root, text="Browse", command=self.select_stub).pack()

        # Key generation
        tk.Label(root, text="Generated Key:").pack()
        tk.Entry(root, textvariable=self.key, width=50).pack()
        tk.Button(root, text="Generate Key", command=self.generate_key).pack()

        # Encrypt button
        tk.Button(root, text="Encrypt", command=self.encrypt_file).pack()

    def select_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("Executable Files", "*.exe")])
        if file_path:
            self.file_path.set(file_path)

    def select_stub(self):
        stub_path = filedialog.askopenfilename(filetypes=[("Executable Files", "*.exe")])
        if stub_path:
            self.stub_path.set(stub_path)

    def generate_key(self):
        self.key.set(generate_random_string(30))

    def encrypt_file(self):
        input_path = self.file_path.get()
        stub_path = self.stub_path.get()
        encryption_key = self.key.get()

        if not input_path or not stub_path or not encryption_key:
            messagebox.showerror("Error", "Please provide all inputs.")
            return

        try:
            with open(input_path, "rb") as f:
                data = f.read()

            encrypted_data = rc4_encrypt(data, encryption_key)
            encoded_data = base64.b64encode(encrypted_data).decode('utf-8')

            save_path = filedialog.asksaveasfilename(defaultextension=".exe", filetypes=[("Executable Files", "*.exe")])
            if not save_path:
                return

            with open(stub_path, "rb") as f:
                stub_data = f.read()

            with open(save_path, "wb") as f:
                f.write(stub_data)
                f.write(encoded_data.encode('utf-8'))
                f.write(encryption_key.encode('utf-8'))

            messagebox.showinfo("Success", "File successfully encrypted!")

        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {str(e)}")

if __name__ == "__main__":
    root = tk.Tk()
    app = CrypterApp(root)
    root.mainloop()
